#include <iostream>
#include <cmath>
#include <string>
#include <vector>
#include <set>
#include <map>

using namespace std;

// Функция для проверки приоритета операций
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

// Функция для выполнения арифметических операций
int applyOp(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return b ? a / b : 0; // Проверка на деление на ноль
    }
    return 0;
}

// Функция для вычисления выражения
int evaluate(string expr) {
    vector<int> values; // Стек значений
    vector<char> ops;   // Стек операций
    map<char, char> brackets = {{')', '('}, {']', '['}, {'}', '{'}};
    set<char> opening_brackets = {'(', '[', '{'};
    set<char> closing_brackets = {')', ']', '}'};
    
    for (int i = 0; i < expr.length(); i++) {
        if (expr[i] == ' ') continue;
        
        if (isdigit(expr[i])) {
            int val = 0;
            while (i < expr.length() && isdigit(expr[i])) {
                val = (val * 10) + (expr[i] - '0');
                i++;
            }
            values.push_back(val);
            i--;
        } else if (opening_brackets.count(expr[i])) {
            ops.push_back(expr[i]);
        } else if (closing_brackets.count(expr[i])) {
            while (!ops.empty() && ops.back() != brackets[expr[i]]) {
                int b = values.back(); values.pop_back();
                int a = values.back(); values.pop_back();
                char op = ops.back(); ops.pop_back();
                values.push_back(applyOp(a, b, op));
            }
            ops.pop_back();
        } else if (precedence(expr[i])) {
            while (!ops.empty() && precedence(ops.back()) >= precedence(expr[i])) {
                int b = values.back(); values.pop_back();
                int a = values.back(); values.pop_back();
                char op = ops.back(); ops.pop_back();
                values.push_back(applyOp(a, b, op));
            }
            ops.push_back(expr[i]);
        }
    }
    
    while (!ops.empty()) {
        int b = values.back(); values.pop_back();
        int a = values.back(); values.pop_back();
        char op = ops.back(); ops.pop_back();
        values.push_back(applyOp(a, b, op));
    }
    
    return values.back();
}

int main() {
    string expression;
    cout << "Введите выражение: ";
    getline(cin, expression);
    cout << "Результат: " << evaluate(expression) << endl;
    return 0;
}